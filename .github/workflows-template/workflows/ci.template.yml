name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly
    - cron: '0 6 * * 1'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint:
    name: Lint & Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.2.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

      - name: Validate docker-compose.yml
        run: |
          # Install docker-compose
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          docker-compose config -q

      - name: Check Makefile syntax
        run: |
          make help || echo "Make not available in runner"

      - name: Validate environment files
        run: |
          # Check .env.example syntax
          if [ -f .env.example ]; then
            echo "Validating .env.example..."
            # Simple syntax validation
            grep -E '^[A-Z_][A-Z0-9_]*=' .env.example || true
          fi

  test-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=test-${{ github.sha }}
            VCS_REF=${{ github.sha }}
            ${APPLICATION_NAME_UPPER}_VERSION=${DEFAULT_VERSION}
            PROJECT_VERSION=$(cat VERSION || echo "1.0.0")

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: mildman1848/${APPLICATION_NAME}:test
          cache-from: type=gha
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=test
            VCS_REF=${{ github.sha }}
            PROJECT_VERSION=$(cat VERSION || echo "1.0.0")

      - name: Create test environment
        run: |
          # Create test directories for ${APPLICATION_NAME} with proper structure
          mkdir -p test-volumes/config/{${APPLICATION_NAME},cache,logs}
          mkdir -p test-volumes/{data,media,backup}

          # Set proper permissions for directories
          chmod 755 test-volumes/config
          chmod 755 test-volumes/data test-volumes/media test-volumes/backup

          # Create minimal .env for testing
          cat > .env << EOF
          DOCKER_REPO=mildman1848/${APPLICATION_NAME}
          VERSION=test
          PUID=1000
          PGID=1000
          TZ=UTC
          ${APPLICATION_NAME_UPPER}_LOG_LEVEL=INFO
          ${APPLICATION_NAME_UPPER}_MODE=${DEFAULT_MODE}
          EXTERNAL_PORT=${DEFAULT_PORT}
          EOF

      - name: Generate test secrets
        run: |
          mkdir -p secrets
          openssl rand -base64 32 | tr -d "=+/" | head -c 24 > secrets/${APPLICATION_NAME}_config_pass.txt
          openssl rand -base64 32 | tr -d "=+/" | head -c 32 > secrets/${APPLICATION_NAME}_api_key.txt
          openssl rand -base64 48 | tr -d "=+/" | head -c 48 > secrets/${APPLICATION_NAME}_jwt_secret.txt
          chmod 600 secrets/*.txt

      - name: Test container startup
        run: |
          # Start container
          docker run -d \
            --name ${APPLICATION_NAME}-test \
            -p ${DEFAULT_PORT}:${APPLICATION_PORT} \
            -v $(pwd)/test-volumes/config:/config \
            -v $(pwd)/test-volumes/data:/data \
            -v $(pwd)/test-volumes/media:/media \
            -v $(pwd)/test-volumes/backup:/backup \
            -v $(pwd)/secrets:/run/secrets:ro \
            -e PUID=1000 \
            -e PGID=1000 \
            -e TZ=UTC \
            -e ${APPLICATION_NAME_UPPER}_MODE=${DEFAULT_MODE} \
            -e FILE__${APPLICATION_NAME_UPPER}_API_KEY=/run/secrets/${APPLICATION_NAME}_api_key.txt \
            mildman1848/${APPLICATION_NAME}:test

      - name: Wait for container
        run: |
          # Wait for container to be ready - improved startup detection
          echo "Waiting for container to start..."
          sleep 10

          # Wait for ${APPLICATION_NAME} process to start
          timeout 180s bash -c 'while ! docker exec ${APPLICATION_NAME}-test ps aux | grep -v grep | grep ${APPLICATION_NAME} >/dev/null 2>&1; do
            echo "Waiting for ${APPLICATION_NAME} process..."
            sleep 5
          done'

          # Additional wait for application to be ready
          echo "Waiting for application to be ready..."
          sleep 20

      - name: Test container health
        run: |
          # Check if container is running
          docker ps | grep ${APPLICATION_NAME}-test

          # Test ${APPLICATION_NAME} process is running
          docker exec ${APPLICATION_NAME}-test ps aux | grep -v grep | grep ${APPLICATION_NAME}

          # Check container logs for any errors
          echo "=== Container startup logs ==="
          docker logs ${APPLICATION_NAME}-test

          # Test basic connectivity
          echo "=== Testing basic connectivity ==="
          timeout 30s bash -c 'while ! nc -z localhost ${DEFAULT_PORT}; do echo "Waiting for port ${DEFAULT_PORT}..."; sleep 2; done' || echo "Port ${DEFAULT_PORT} check timed out"

          # Application-specific health checks
          ${APPLICATION_SPECIFIC_HEALTH_CHECKS}

      - name: Test container logs
        if: always()
        run: |
          echo "=== Container logs ==="
          docker logs ${APPLICATION_NAME}-test
          echo "=== Container inspect ==="
          docker inspect ${APPLICATION_NAME}-test

      - name: Cleanup test container
        if: always()
        run: |
          docker stop ${APPLICATION_NAME}-test || true
          docker rm ${APPLICATION_NAME}-test || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: mildman1848/${APPLICATION_NAME}:scan
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mildman1848/${APPLICATION_NAME}:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for detailed output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mildman1848/${APPLICATION_NAME}:scan'
          format: 'table'
          exit-code: '0'  # Don't fail the build on vulnerabilities

  docker-compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install docker-compose
        run: |
          # Install docker-compose
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Create test environment
        run: |
          # Create test directories for docker-compose
          mkdir -p config/{${APPLICATION_NAME},cache,logs}
          mkdir -p data media backup logs
          chmod 755 config data media backup logs

          # Copy .env.example to .env for testing
          cp .env.example .env

          # Override with test values for docker-compose
          cat >> .env << EOF
          VERSION=test
          IMAGE_TAG=test
          EXTERNAL_PORT=${DEFAULT_PORT}
          ${APPLICATION_NAME_UPPER}_LOG_LEVEL=DEBUG
          CONFIG_PATH=./config
          DATA_PATH=./data
          MEDIA_PATH=./media
          BACKUP_PATH=./backup
          LOGS_PATH=./logs
          SECRETS_PATH=./secrets
          EOF

      - name: Generate secrets
        run: |
          mkdir -p secrets
          openssl rand -base64 32 | tr -d "=+/" | head -c 24 > secrets/${APPLICATION_NAME}_config_pass.txt
          openssl rand -base64 32 | tr -d "=+/" | head -c 32 > secrets/${APPLICATION_NAME}_api_key.txt
          openssl rand -base64 48 | tr -d "=+/" | head -c 48 > secrets/${APPLICATION_NAME}_jwt_secret.txt

      - name: Build image first
        run: |
          docker build -t mildman1848/${APPLICATION_NAME}:test .

      - name: Test docker-compose up
        run: |
          # The IMAGE_TAG=test is already set in .env file
          docker-compose up -d ${APPLICATION_NAME}

      - name: Wait and test service
        run: |
          # Wait for service startup and check container status
          echo "Waiting for ${APPLICATION_NAME} service to start..."
          sleep 20

          # Check container status first
          echo "=== Container status ==="
          docker-compose ps

          # Check container logs early to debug issues
          echo "=== Container logs ==="
          docker-compose logs ${APPLICATION_NAME}

          # Wait for container to be healthy (more robust approach)
          echo "Waiting for container to be ready..."
          for i in {1..30}; do
            if docker-compose ps ${APPLICATION_NAME} | grep -q "Up"; then
              echo "Container is running, checking health..."
              break
            fi
            echo "Container not ready yet, waiting... ($i/30)"
            sleep 5
          done

          # Test if ${APPLICATION_NAME} process is running (only if container is up)
          echo "=== Checking ${APPLICATION_NAME} process ==="
          if docker-compose ps ${APPLICATION_NAME} | grep -q "Up"; then
            docker-compose exec -T ${APPLICATION_NAME} ps aux | grep -v grep | grep ${APPLICATION_NAME} || echo "${APPLICATION_NAME} process not found yet"
          else
            echo "Container is not running - skipping process check"
          fi

          # Test basic connectivity
          echo "=== Testing port connectivity ==="
          timeout 60s bash -c 'while ! nc -z localhost ${DEFAULT_PORT}; do echo "Waiting for port ${DEFAULT_PORT}..."; sleep 3; done' || echo "Port check timed out"

          # Application-specific service tests
          ${APPLICATION_SPECIFIC_SERVICE_TESTS}

      - name: Check logs
        if: always()
        run: |
          echo "=== Docker Compose logs ==="
          docker-compose logs

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v