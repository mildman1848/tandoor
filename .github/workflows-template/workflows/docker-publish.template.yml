name: Docker Build & Publish

on:
  release:
    types: [ published ]
  workflow_call:
    inputs:
      tag:
        description: 'Tag to build and publish'
        required: false
        type: string
      force_publish:
        description: 'Force publish'
        required: false
        default: true
        type: boolean
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build and publish (leave empty for current ref)'
        required: false
        type: string
      force_publish:
        description: 'Force publish without release'
        required: false
        default: false
        type: boolean

env:
  REGISTRY_DOCKER: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: mildman1848/${APPLICATION_NAME}

jobs:
  # Build individual platform images and push by digest
  build:
    name: Build Platform Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ inputs.tag || github.ref }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && (inputs.force_publish || github.event_name == 'release')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request' && (inputs.force_publish || github.event_name == 'release')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Get version information
        id: version_info
        run: |
          # Get application version
          ${APPLICATION_NAME_UPPER}_VERSION_VAR=$(grep "${APPLICATION_NAME_UPPER}_VERSION=" .env.example | cut -d'=' -f2 | tr -d '"' || echo "${DEFAULT_VERSION}")
          echo "${APPLICATION_NAME}_version=${${APPLICATION_NAME_UPPER}_VERSION_VAR}" >> $GITHUB_OUTPUT
          echo "${APPLICATION_NAME} version: ${${APPLICATION_NAME_UPPER}_VERSION_VAR}"

          # Get project version
          if [ -f VERSION ]; then
            PROJECT_VERSION=$(cat VERSION)
          else
            PROJECT_VERSION="1.0.0"
          fi
          echo "project_version=${PROJECT_VERSION}" >> $GITHUB_OUTPUT
          echo "Project version: ${PROJECT_VERSION}"

          # Generate timestamp
          TIMESTAMP=$(date -u +'%Y%m%d%H%M%S')
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Generate platform-specific tags
        id: platform_tags
        run: |
          # Convert platform to safe tag format (linux/amd64 -> amd64)
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/linux\///g' | sed 's/\//-/g')
          echo "platform_tag=${PLATFORM_TAG}" >> $GITHUB_OUTPUT

          # Create platform-specific image names
          DOCKER_PLATFORM_IMAGE="${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:${PLATFORM_TAG}-${{ github.sha }}"
          GHCR_PLATFORM_IMAGE="${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${PLATFORM_TAG}-${{ github.sha }}"

          echo "docker_platform_image=${DOCKER_PLATFORM_IMAGE}" >> $GITHUB_OUTPUT
          echo "ghcr_platform_image=${GHCR_PLATFORM_IMAGE}" >> $GITHUB_OUTPUT

      - name: Build and push platform image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' && (inputs.force_publish || github.event_name == 'release') }}
          tags: |
            ${{ steps.platform_tags.outputs.docker_platform_image }}
            ${{ steps.platform_tags.outputs.ghcr_platform_image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Disable provenance to avoid manifest list issues
          provenance: false
          sbom: false
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}
            ${APPLICATION_NAME_UPPER}_VERSION=${{ steps.version_info.outputs.${APPLICATION_NAME}_version }}
            PROJECT_VERSION=${{ steps.version_info.outputs.project_version }}

      - name: Export digest
        if: github.event_name != 'pull_request' && (inputs.force_publish || github.event_name == 'release')
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          echo "Raw digest: $digest"
          # Ensure we have a proper SHA256 digest
          if [[ "$digest" =~ ^sha256:[a-f0-9]{64}$ ]]; then
            echo "$digest" > "/tmp/digests/${digest#sha256:}"
            echo "Exported digest: ${digest#sha256:}"
          else
            echo "ERROR: Invalid digest format: $digest"
            exit 1
          fi

      - name: Upload digest
        if: github.event_name != 'pull_request' && (inputs.force_publish || github.event_name == 'release')
        uses: actions/upload-artifact@v4.6.2
        with:
          name: digests-${{ steps.platform_tags.outputs.platform_tag }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Create and push manifest lists
  manifest:
    name: Create Multi-Platform Manifest
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && (inputs.force_publish || github.event_name == 'release')
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ inputs.tag || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${APPLICATION_NAME}
            org.opencontainers.image.description=${APPLICATION_DESCRIPTION}
            org.opencontainers.image.vendor=Mildman1848
            org.opencontainers.image.licenses=MIT

      - name: Get version information
        id: version_info
        run: |
          # Get application version
          ${APPLICATION_NAME_UPPER}_VERSION_VAR=$(grep "${APPLICATION_NAME_UPPER}_VERSION=" .env.example | cut -d'=' -f2 | tr -d '"' || echo "${DEFAULT_VERSION}")
          echo "${APPLICATION_NAME}_version=${${APPLICATION_NAME_UPPER}_VERSION_VAR}" >> $GITHUB_OUTPUT
          echo "${APPLICATION_NAME} version: ${${APPLICATION_NAME_UPPER}_VERSION_VAR}"

          # Get project version
          if [ -f VERSION ]; then
            PROJECT_VERSION=$(cat VERSION)
          else
            PROJECT_VERSION="1.0.0"
          fi
          echo "project_version=${PROJECT_VERSION}" >> $GITHUB_OUTPUT
          echo "Project version: ${PROJECT_VERSION}"

      - name: Create versioned manifest lists (LinuxServer.io style)
        id: manifest_creation
        working-directory: /tmp/digests
        run: |
          # LinuxServer.io pipeline style: Create architecture-specific tags and manifest lists
          platforms=("amd64" "arm64")

          # Read tags into array to avoid subshell issues
          mapfile -t tag_array < <(echo '${{ steps.meta.outputs.tags }}' | tr ' ' '\n' | grep -v '^$')

          # Process all tags from metadata
          for tag in "${tag_array[@]}"; do
            if [[ -n "$tag" ]]; then
              echo "Creating manifest list for tag: $tag"

              # Create architecture-specific tags (LinuxServer.io style)
              for platform in "${platforms[@]}"; do
                arch_tag="${tag%:*}:${platform}-$(echo "$tag" | cut -d: -f2)"
                echo "Creating arch-specific tag: $arch_tag"

                # Find matching digest for this platform
                digest_files=(*)
                case $platform in
                  "amd64")
                    if [ ${#digest_files[@]} -gt 0 ]; then
                      digest_content=$(cat "${digest_files[0]}")
                      docker buildx imagetools create --tag "$arch_tag" "${tag%:*}@$digest_content"
                    fi
                    ;;
                  "arm64")
                    if [ ${#digest_files[@]} -gt 1 ]; then
                      digest_content=$(cat "${digest_files[1]}")
                      docker buildx imagetools create --tag "$arch_tag" "${tag%:*}@$digest_content"
                    fi
                    ;;
                esac
              done

              # Create main manifest list that references all platforms
              PLATFORM_REFS=""
              for digest_file in *; do
                if [ -f "$digest_file" ]; then
                  digest_content=$(cat "$digest_file")
                  PLATFORM_REFS="$PLATFORM_REFS ${tag%:*}@$digest_content"
                fi
              done

              if [ -n "$PLATFORM_REFS" ]; then
                docker buildx imagetools create --tag "$tag" $PLATFORM_REFS

                # Store main manifest digest for SBOM (only for latest tag)
                if [[ "$tag" == *":latest" ]]; then
                  MAIN_MANIFEST_DIGEST=$(docker buildx imagetools inspect --raw "$tag" | sha256sum | cut -d' ' -f1)
                  echo "main_manifest_digest=sha256:${MAIN_MANIFEST_DIGEST}" >> $GITHUB_OUTPUT
                fi
              fi
            fi
          done

      - name: Generate SBOM attestation
        if: steps.manifest_creation.outputs.main_manifest_digest != ''
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.manifest_creation.outputs.main_manifest_digest }}
          push-to-registry: true

      - name: Run vulnerability scan on manifest list
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest
          format: 'table'
          exit-code: '0'

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: manifest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Delete old GitHub Container Registry images
        uses: actions/delete-package-versions@v5
        continue-on-error: true
        with:
          package-name: '${APPLICATION_NAME}'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
          token: ${{ secrets.GHCR_TOKEN }}