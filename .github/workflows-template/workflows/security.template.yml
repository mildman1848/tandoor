name: Security Scan

on:
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript'  # For any JS/Node.js scripts if added

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  dockerfile-security:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Scan Dockerfile with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'dockerfile-scan.sarif'

      - name: Upload Dockerfile scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'dockerfile-scan.sarif'

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: mildman1848/${APPLICATION_NAME}:security-scan
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mildman1848/${APPLICATION_NAME}:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run detailed vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mildman1848/${APPLICATION_NAME}:security-scan'
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'  # Don't fail build, just report

  secrets-security:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.before }}
          head: ${{ github.sha }}
          extra_args: --debug --only-verified

  docker-bench-security:
    name: Docker Bench Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: mildman1848/${APPLICATION_NAME}:bench-test

      - name: Run Docker Bench for Security
        run: |
          # Clone Docker Bench Security
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security

          # Run the security benchmark
          sudo sh docker-bench-security.sh -c container_images

      - name: Upload Docker Bench results
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: docker-bench-results
          path: docker-bench-security/docker-bench-security.log

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: SLSA Provenance Check
        uses: slsa-framework/slsa-verifier/actions/installer@v2.7.1

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4.6.2
        with:
          name: sbom
          path: ./*.spdx.json

  security-hardening-check:
    name: Security Hardening Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test security features
        run: |
          # Build image
          docker build -t security-test .

          # Run container and check security features
          docker run -d --name security-test security-test

          # Check if running as non-root
          USER_CHECK=$(docker exec security-test whoami)
          echo "Container user: $USER_CHECK"
          if [ "$USER_CHECK" = "root" ]; then
            echo "WARNING: Container running as root!"
            # Don't fail build, just warn
          fi

          # Check capabilities
          echo "Checking container capabilities..."
          docker exec security-test cat /proc/self/status | grep Cap

          # Check if no-new-privileges is set
          echo "Checking no-new-privileges..."
          docker inspect security-test | jq '.[0].HostConfig.SecurityOpt'

          # Application-specific security checks
          ${APPLICATION_SPECIFIC_SECURITY_CHECKS}

          # Cleanup
          docker stop security-test
          docker rm security-test

  notify-security-results:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [code-security, dockerfile-security, container-security, secrets-security]
    if: always() && (needs.container-security.result == 'failure' || needs.secrets-security.result == 'failure')
    steps:
      - name: Notify on security issues
        run: |
          echo "⚠️ Security vulnerabilities detected!"
          echo "Please check the security scan results and address any issues."
          # Here you could add notifications to Slack, Discord, or email