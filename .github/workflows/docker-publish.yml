name: Docker Build & Publish

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build and publish'
        required: true
        default: 'latest'
        type: string
env:
  REGISTRY_DOCKER: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/tandoor

jobs:
  # Build individual platform images and push by digest
  build:
    name: Build Platform Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          flavor: |
            latest=auto
            prefix=
            suffix=

      - name: Generate platform-specific image name
        id: platform-name
        run: |
          platform=${{ matrix.platform }}
          echo "platform_pair=${platform//\//-}" >> $GITHUB_OUTPUT
          echo "platform_arch=${platform##*/}" >> $GITHUB_OUTPUT

      - name: Build and push platform image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}
            TANDOOR_VERSION=2.2.7
            PROJECT_VERSION=${{ steps.version.outputs.version }}
          outputs: type=image,name=${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export digest for Docker Hub
        run: |
          mkdir -p /tmp/digests/docker
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/docker/${digest#sha256:}"

      - name: Build and push platform image to GHCR
        id: build-ghcr
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}
            TANDOOR_VERSION=2.2.7
            PROJECT_VERSION=${{ steps.version.outputs.version }}
          outputs: type=image,name=${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export digest for GHCR
        run: |
          mkdir -p /tmp/digests/ghcr
          digest="${{ steps.build-ghcr.outputs.digest }}"
          touch "/tmp/digests/ghcr/${digest#sha256:}"

      - name: Upload digests artifact (Docker Hub)
        uses: actions/upload-artifact@v4
        with:
          name: digests-docker-${{ steps.platform-name.outputs.platform_pair }}
          path: /tmp/digests/docker/*
          if-no-files-found: error
          retention-days: 1

      - name: Upload digests artifact (GHCR)
        uses: actions/upload-artifact@v4
        with:
          name: digests-ghcr-${{ steps.platform-name.outputs.platform_pair }}
          path: /tmp/digests/ghcr/*
          if-no-files-found: error
          retention-days: 1

  # Create and push manifest lists
  merge:
    name: Create Manifest Lists
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download digests (Docker Hub)
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests/docker
          pattern: digests-docker-*
          merge-multiple: true

      - name: Download digests (GHCR)
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests/ghcr
          pattern: digests-ghcr-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata for Docker Hub
        id: meta-docker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Extract metadata for GHCR
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Create manifest list and push (Docker Hub)
        working-directory: /tmp/digests/docker
        run: |
          # Get platform digests and create manifest list
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
        env:
          DOCKER_METADATA_OUTPUT_JSON: ${{ steps.meta-docker.outputs.json }}

      - name: Create manifest list and push (GHCR)
        working-directory: /tmp/digests/ghcr
        run: |
          # Get platform digests and create manifest list
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
        env:
          DOCKER_METADATA_OUTPUT_JSON: ${{ steps.meta-ghcr.outputs.json }}

      - name: Create LinuxServer.io style architecture tags (Docker Hub)
        working-directory: /tmp/digests/docker
        run: |
          # Extract version tag for architecture-specific tagging
          VERSION_TAG=$(echo '${{ steps.meta-docker.outputs.tags }}' | head -1 | cut -d':' -f2)

          # Create architecture-specific tags
          for digest in *; do
            # Determine architecture from digest context (this is a simplified approach)
            if [[ -f "${digest}" ]]; then
              # Create amd64 and arm64 tags - adjust logic based on your platform detection needs
              docker buildx imagetools create \
                -t ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:amd64-${VERSION_TAG} \
                -t ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:amd64-latest \
                ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}@sha256:${digest} || true

              docker buildx imagetools create \
                -t ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:arm64-${VERSION_TAG} \
                -t ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:arm64-latest \
                ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}@sha256:${digest} || true
            fi
          done

      - name: Create LinuxServer.io style architecture tags (GHCR)
        working-directory: /tmp/digests/ghcr
        run: |
          # Extract version tag for architecture-specific tagging
          VERSION_TAG=$(echo '${{ steps.meta-ghcr.outputs.tags }}' | head -1 | cut -d':' -f2)

          # Create architecture-specific tags
          for digest in *; do
            if [[ -f "${digest}" ]]; then
              # Create amd64 and arm64 tags
              docker buildx imagetools create \
                -t ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:amd64-${VERSION_TAG} \
                -t ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:amd64-latest \
                ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}@sha256:${digest} || true

              docker buildx imagetools create \
                -t ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:arm64-${VERSION_TAG} \
                -t ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:arm64-latest \
                ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}@sha256:${digest} || true
            fi
          done

      - name: Inspect manifest lists
        run: |
          # Docker Hub inspection
          echo "=== Docker Hub Manifest Lists ==="
          for tag in ${{ steps.meta-docker.outputs.tags }}; do
            echo "Inspecting: ${tag}"
            docker buildx imagetools inspect "${tag}" || true
            echo "---"
          done

          # GHCR inspection
          echo "=== GHCR Manifest Lists ==="
          for tag in ${{ steps.meta-ghcr.outputs.tags }}; do
            echo "Inspecting: ${tag}"
            docker buildx imagetools inspect "${tag}" || true
            echo "---"
          done

  # Generate SBOM and attestations
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: merge
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: /tmp/sbom.spdx.json
          upload-artifact: true

      - name: Upload SBOM to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: /tmp/sbom.spdx.json
          asset_name: sbom.spdx.json
          asset_content_type: application/json

  # Cleanup old packages (GHCR)
  cleanup:
    name: Cleanup Old Packages
    runs-on: ubuntu-latest
    needs: sbom
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Delete old GHCR packages
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'tandoor'
          package-type: 'container'
          min-versions-to-keep: 10
          ignore-versions: '^(latest|main|develop)$'
          token: ${{ secrets.GHCR_TOKEN }}
        continue-on-error: true