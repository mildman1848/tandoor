name: Docker Build & Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Multi-Platform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64, arm64]
    outputs:
      image-digest-amd64: ${{ steps.build-amd64.outputs.digest }}
      image-digest-arm64: ${{ steps.build-arm64.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create VERSION file if missing
        run: |
          if [ ! -f VERSION ]; then
            if [ "${{ github.ref_type }}" == "tag" ]; then
              echo "${{ github.ref_name }}" | sed 's/^v//' > VERSION
            else
              echo "1.0.0-ci.${GITHUB_RUN_NUMBER}" > VERSION
            fi
          fi

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push by digest (AMD64)
        id: build-amd64
        if: matrix.platform == 'amd64'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-latest
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64
          build-args: |
            VERSION=$(cat VERSION)
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

      - name: Build and push by digest (ARM64)
        id: build-arm64
        if: matrix.platform == 'arm64'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-latest
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64
          build-args: |
            VERSION=$(cat VERSION)
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          if [ "${{ matrix.platform }}" == "amd64" ]; then
            echo "${{ steps.build-amd64.outputs.digest }}" > /tmp/digests/amd64
          elif [ "${{ matrix.platform }}" == "arm64" ]; then
            echo "${{ steps.build-arm64.outputs.digest }}" > /tmp/digests/arm64
          fi

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  manifest:
    name: Create Manifest Lists
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          # Extract tag from metadata
          TAGS="${{ steps.meta.outputs.tags }}"

          for tag in $TAGS; do
            echo "Creating manifest for tag: $tag"

            # Create manifest list
            docker buildx imagetools create \
              --tag $tag \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-latest \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-latest

            echo "âœ… Manifest created for $tag"
          done

      - name: Create version-specific architecture tags
        if: github.ref_type == 'tag'
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present

          # Tag architecture-specific images with version
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-${VERSION} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-latest

          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-${VERSION} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-latest

      - name: Inspect manifest
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [manifest]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Upload SBOM to dependency graph
        uses: advanced-security/spdx-dependency-submission-action@v0.1.1
        with:
          filePath: sbom.spdx.json

  cleanup:
    name: Cleanup Old Packages
    runs-on: ubuntu-latest
    needs: [manifest]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Delete old packages
        uses: actions/delete-package-versions@v5
        continue-on-error: true
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
          token: ${{ secrets.GHCR_TOKEN }}