name: Security Scan

on:
  schedule:
    - cron: '0 6 * * 1'  # Weekly Monday 6 AM UTC
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - '.github/workflows/security.yml'
      - 'package*.json'
      - 'requirements*.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - '.github/workflows/security.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: scan-image:latest
          cache-from: type=gha
          build-args: |
            VERSION=scan
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

      - name: Run Trivy vulnerability scanner (Table)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'scan-image:latest'
          format: 'table'
          exit-code: '0'  # Don't fail on vulnerabilities for informational scan

      - name: Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'scan-image:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'scan-image:latest'
          format: 'json'
          output: 'trivy-results.json'

      - name: Generate security summary
        if: always()
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f trivy-results.json ]; then
            echo "## Vulnerability Statistics" >> $GITHUB_STEP_SUMMARY

            CRITICAL=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length')
            HIGH=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length')
            MEDIUM=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length')
            LOW=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length')

            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| 🔴 Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟠 High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟡 Medium | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟢 Low | $LOW |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$CRITICAL" -gt 0 ]; then
              echo "⚠️ **WARNING: Critical vulnerabilities found!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            trivy-results.sarif
            trivy-results.json
          retention-days: 30

  filesystem-scan:
    name: Filesystem Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload filesystem scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Run Trivy filesystem scanner (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'

      - name: Upload filesystem scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: filesystem-scan-results
          path: |
            trivy-fs-results.sarif
            trivy-fs-results.json

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scan

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node.js dependency scanning
      - name: Setup Node.js
        if: hashFiles('package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        if: hashFiles('package.json') != ''
        run: npm ci

      - name: Run npm audit
        if: hashFiles('package.json') != ''
        run: |
          npm audit --audit-level moderate --json > npm-audit.json || true
          npm audit --audit-level moderate

      - name: Upload npm audit results
        if: hashFiles('package.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit.json

      # Python dependency scanning
      - name: Setup Python
        if: hashFiles('requirements.txt', 'requirements-dev.txt', 'Pipfile', 'pyproject.toml') != ''
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install safety
        if: hashFiles('requirements.txt', 'requirements-dev.txt', 'Pipfile', 'pyproject.toml') != ''
        run: pip install safety

      - name: Run safety check
        if: hashFiles('requirements.txt', 'requirements-dev.txt', 'Pipfile', 'pyproject.toml') != ''
        run: |
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --json > safety-report.json || true
          fi

      - name: Upload safety results
        if: hashFiles('requirements.txt', 'requirements-dev.txt', 'Pipfile', 'pyproject.toml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: safety-results
          path: safety-report.json

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [container-scan, filesystem-scan, secret-scan, dependency-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Generate comprehensive security report
        run: |
          echo "# 🔒 Comprehensive Security Report" > security-report.md
          echo "" >> security-report.md
          echo "Generated on: $(date -u)" >> security-report.md
          echo "Repository: ${{ github.repository }}" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md

          echo "## 📊 Scan Summary" >> security-report.md
          echo "" >> security-report.md

          # List all completed scans
          echo "### Completed Scans:" >> security-report.md
          echo "- ✅ Container vulnerability scan" >> security-report.md
          echo "- ✅ Filesystem security scan" >> security-report.md
          echo "- ✅ Secret scanning" >> security-report.md
          echo "- ✅ Dependency security scan" >> security-report.md
          echo "" >> security-report.md

          echo "## 📁 Available Reports" >> security-report.md
          echo "" >> security-report.md
          find security-reports -name "*.json" -o -name "*.sarif" | while read file; do
            echo "- \`$(basename "$file")\`" >> security-report.md
          done
          echo "" >> security-report.md

          echo "## 🔍 Next Steps" >> security-report.md
          echo "" >> security-report.md
          echo "1. Review the Security tab for detailed vulnerability information" >> security-report.md
          echo "2. Check the workflow artifacts for detailed reports" >> security-report.md
          echo "3. Address any critical or high severity vulnerabilities" >> security-report.md
          echo "4. Update dependencies regularly to maintain security" >> security-report.md

      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: security-report.md

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-report.md')) {
              const report = fs.readFileSync('security-report.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }