name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  filesystem-scan:
    name: Filesystem Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Upload filesystem scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: filesystem-scan-results
          path: trivy-fs-results.sarif

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:security-scan
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:security-scan
          format: 'json'
          output: 'trivy-results.json'

      - name: Run Trivy vulnerability scanner on image (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:security-scan
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate security summary
        if: always()
        run: |
          if [ -f trivy-results.json ]; then
            echo "## 🔍 Container Security Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            CRITICAL=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length')
            HIGH=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length')
            MEDIUM=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length')
            LOW=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length')

            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| 🔴 Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟠 High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟡 Medium | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟢 Low | $LOW |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$CRITICAL" -gt 0 ]; then
              echo "⚠️ **WARNING: Critical vulnerabilities found!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Trivy scan results not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            trivy-results.json
            trivy-results.sarif

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run dependency check
        run: |
          echo "## 📦 Dependency Security Check" >> $GITHUB_STEP_SUMMARY

          # Check for common dependency files
          if [ -f "package.json" ]; then
            echo "- Found package.json (Node.js dependencies)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "requirements.txt" ]; then
            echo "- Found requirements.txt (Python dependencies)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "Dockerfile" ]; then
            echo "- Found Dockerfile (Container dependencies)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Dependency scan completed" >> $GITHUB_STEP_SUMMARY

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified --json --no-update
        continue-on-error: true

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [filesystem-scan, container-scan, dependency-scan, secret-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Generate comprehensive security report
        run: |
          echo "# 🛡️ Security Scan Report" > SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          echo "**Date:** $(date)" >> SECURITY_REPORT.md
          echo "**Repository:** ${{ github.repository }}" >> SECURITY_REPORT.md
          echo "**Commit:** ${{ github.sha }}" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md

          echo "## Scan Summary" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          echo "- ✅ Filesystem Security Scan" >> SECURITY_REPORT.md
          echo "- ✅ Container Security Scan" >> SECURITY_REPORT.md
          echo "- ✅ Dependency Security Scan" >> SECURITY_REPORT.md
          echo "- ✅ Secret Scanning" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md

          echo "Detailed results are available in the artifacts section." >> SECURITY_REPORT.md

      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: SECURITY_REPORT.md