name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version (e.g., 1.5.19)'
        required: true
        type: string
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      tandoor_version:
        description: 'Tandoor Recipes Version (if different from release version)'
        required: false
        type: string
      dry_run:
        description: 'Dry Run (test without creating release)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      tandoor_version: ${{ steps.validate.outputs.tandoor_version }}
      tag: ${{ steps.validate.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate inputs and generate versions
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TANDOOR_VERSION="${{ github.event.inputs.tandoor_version }}"

          # Use release version as Tandoor version if not specified
          if [ -z "$TANDOOR_VERSION" ]; then
            TANDOOR_VERSION="$VERSION"
          fi

          # Validate version format
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

          TAG="v$VERSION"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tandoor_version=$TANDOOR_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          echo "‚úÖ Release validation passed"
          echo "  Release Version: $VERSION"
          echo "  Tandoor Version: $TANDOOR_VERSION"
          echo "  Git Tag: $TAG"

      - name: Check if tag exists
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${{ steps.validate.outputs.tag }}$"; then
            echo "‚ùå Tag ${{ steps.validate.outputs.tag }} already exists!"
            exit 1
          fi
          echo "‚úÖ Tag ${{ steps.validate.outputs.tag }} is available"

  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update VERSION file
        run: |
          echo "${{ needs.validate.outputs.version }}" > VERSION
          echo "‚úÖ Updated VERSION file to ${{ needs.validate.outputs.version }}"

      - name: Update Dockerfile with Tandoor version
        run: |
          sed -i 's/ARG TANDOOR_VERSION="[^"]*"/ARG TANDOOR_VERSION="${{ needs.validate.outputs.tandoor_version }}"/' Dockerfile
          echo "‚úÖ Updated Dockerfile TANDOOR_VERSION to ${{ needs.validate.outputs.tandoor_version }}"

      - name: Generate CHANGELOG entry
        run: |
          TODAY=$(date +%Y-%m-%d)
          CHANGELOG_ENTRY="## [${{ needs.validate.outputs.version }}] - $TODAY

          ### üöÄ Release Highlights
          - Updated to Tandoor Recipes ${{ needs.validate.outputs.tandoor_version }}
          - LinuxServer.io Alpine base image with S6 Overlay v3
          - Enhanced security and performance optimizations

          ### üì¶ Changes
          - Tandoor Recipes: ${{ needs.validate.outputs.tandoor_version }}
          - Container optimizations and security improvements
          - Updated dependencies and security patches

          ### üîß Technical Details
          - **Base Image:** LinuxServer.io Alpine 3.22
          - **Multi-Architecture:** AMD64, ARM64 support
          - **Security:** Enhanced container hardening
          - **Performance:** Optimized Python dependencies and caching

          ### üìñ Documentation
          - Updated README with latest configuration options
          - Enhanced security documentation
          - Improved deployment examples

          ---"

          # Prepend to existing CHANGELOG
          if [ -f CHANGELOG.md ]; then
            echo "$CHANGELOG_ENTRY" > CHANGELOG.new.md
            echo "" >> CHANGELOG.new.md
            tail -n +1 CHANGELOG.md >> CHANGELOG.new.md
            mv CHANGELOG.new.md CHANGELOG.md
          else
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "$CHANGELOG_ENTRY" >> CHANGELOG.md
          fi

          echo "‚úÖ Updated CHANGELOG.md"

      - name: Commit version updates
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add VERSION Dockerfile CHANGELOG.md
          git commit -m "üîñ Release ${{ needs.validate.outputs.version }}

          - Update VERSION to ${{ needs.validate.outputs.version }}
          - Update Tandoor Recipes to ${{ needs.validate.outputs.tandoor_version }}
          - Update CHANGELOG.md with release notes

          ü§ñ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

          git push origin main
          echo "‚úÖ Committed and pushed version updates"

      - name: Show dry run changes
        if: ${{ github.event.inputs.dry_run }}
        run: |
          echo "üß™ DRY RUN - Changes that would be made:"
          echo ""
          echo "VERSION file:"
          cat VERSION
          echo ""
          echo "Dockerfile TANDOOR_VERSION:"
          grep "ARG TANDOOR_VERSION=" Dockerfile
          echo ""
          echo "CHANGELOG.md (first 20 lines):"
          head -20 CHANGELOG.md

  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [validate, prepare]
    strategy:
      matrix:
        platform: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        if: ${{ !github.event.inputs.dry_run }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: ${{ !github.event.inputs.dry_run }}

      - name: Build test image
        uses: docker/build-push-action@v5
        if: ${{ !github.event.inputs.dry_run }}
        with:
          context: .
          platforms: linux/${{ matrix.platform }}
          push: false
          tags: ${{ env.IMAGE_NAME }}:test-${{ matrix.platform }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
            TANDOOR_VERSION=${{ needs.validate.outputs.tandoor_version }}

      - name: Test container functionality
        if: ${{ !github.event.inputs.dry_run && matrix.platform == 'amd64' }}
        run: |
          # Load and test the built image
          docker buildx build --load --platform linux/amd64 -t ${{ env.IMAGE_NAME }}:test .

          # Run basic functionality test
          docker run -d --name test-container \
            -e PUID=911 -e PGID=911 -e TZ=UTC \
            ${{ env.IMAGE_NAME }}:test

          # Wait for container to start
          sleep 30

          # Check if container is running and healthy
          if docker ps | grep -q test-container; then
            echo "‚úÖ Container started successfully"
          else
            echo "‚ùå Container failed to start"
            docker logs test-container
            exit 1
          fi

          # Cleanup
          docker stop test-container
          docker rm test-container

      - name: Show build dry run
        if: ${{ github.event.inputs.dry_run }}
        run: |
          echo "üß™ DRY RUN - Build would use:"
          echo "  Platform: ${{ matrix.platform }}"
          echo "  Version: ${{ needs.validate.outputs.version }}"
          echo "  Tandoor Version: ${{ needs.validate.outputs.tandoor_version }}"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, prepare, build-test]
    if: ${{ !github.event.inputs.dry_run }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git tag -a "${{ needs.validate.outputs.tag }}" -m "Release ${{ needs.validate.outputs.version }}"
          git push origin "${{ needs.validate.outputs.tag }}"
          echo "‚úÖ Created and pushed tag ${{ needs.validate.outputs.tag }}"

      - name: Generate release notes
        id: release_notes
        run: |
          RELEASE_NOTES="## üç¥ Tandoor Recipes ${{ needs.validate.outputs.version }}

          Self-hosted recipe management with enhanced LinuxServer.io compliance and security.

          ### üéØ Key Features
          - **Tandoor Recipes:** ${{ needs.validate.outputs.tandoor_version }}
          - **Multi-Architecture:** Native AMD64 and ARM64 support
          - **Security:** Enhanced container hardening with S6 Overlay v3
          - **LinuxServer.io Compliant:** Full FILE__ secrets and Docker Mods support

          ### üöÄ Quick Start
          \`\`\`bash
          docker run -d \\
            --name tandoor \\
            -p 8080:8080 \\
            -v /path/to/config:/config \\
            -v /path/to/data:/data \\
            -e PUID=1000 \\
            -e PGID=1000 \\
            -e TZ=Europe/London \\
            ghcr.io/${{ github.repository }}:${{ needs.validate.outputs.version }}
          \`\`\`

          ### üì¶ Container Images
          - \`ghcr.io/${{ github.repository }}:${{ needs.validate.outputs.version }}\`
          - \`ghcr.io/${{ github.repository }}:latest\`

          ### üèóÔ∏è Architecture Support
          - \`linux/amd64\`
          - \`linux/arm64\`

          ### üìö Documentation
          - [README](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [Security Policy](https://github.com/${{ github.repository }}/blob/main/SECURITY.md)
          - [LinuxServer.io Documentation](https://github.com/${{ github.repository }}/blob/main/LINUXSERVER.md)

          ### üîó Links
          - [Tandoor Recipes](https://github.com/TandoorRecipes/recipes)
          - [LinuxServer.io](https://www.linuxserver.io/)
          - [Docker Hub](https://hub.docker.com/r/${{ github.repository_owner }}/tandoor)

          **Full Changelog:** [View Changes](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)"

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          release_name: "Tandoor Recipes ${{ needs.validate.outputs.version }}"
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}

  trigger-docker-build:
    name: Trigger Docker Build
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: ${{ !github.event.inputs.dry_run }}
    steps:
      - name: Trigger Docker Build & Publish workflow
        run: |
          gh workflow run docker-publish.yml
          echo "‚úÖ Triggered Docker Build & Publish workflow"
          echo "üîó Monitor progress: https://github.com/${{ github.repository }}/actions/workflows/docker-publish.yml"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [validate, prepare, build-test, create-release, trigger-docker-build]
    if: always()
    steps:
      - name: Generate release summary
        run: |
          echo "## üéâ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "### üß™ DRY RUN COMPLETED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**No actual release was created.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "**Release Version:** ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tandoor Version:** ${{ needs.validate.outputs.tandoor_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Git Tag:** ${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Type:** ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            echo "### ‚úÖ Completed Steps" >> $GITHUB_STEP_SUMMARY
            echo "- Version validation and preparation" >> $GITHUB_STEP_SUMMARY
            echo "- Multi-architecture container builds" >> $GITHUB_STEP_SUMMARY
            echo "- Container functionality testing" >> $GITHUB_STEP_SUMMARY
            echo "- GitHub release creation" >> $GITHUB_STEP_SUMMARY
            echo "- Docker build workflow trigger" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîó Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor [Docker Build workflow](https://github.com/${{ github.repository }}/actions/workflows/docker-publish.yml)" >> $GITHUB_STEP_SUMMARY
            echo "- Verify container images are published" >> $GITHUB_STEP_SUMMARY
            echo "- Update deployment documentation if needed" >> $GITHUB_STEP_SUMMARY
          fi