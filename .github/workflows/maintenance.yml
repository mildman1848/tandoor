name: Maintenance

on:
  schedule:
    # Run maintenance tasks every Sunday at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - cleanup
          - security-audit
          - baseimage-check

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  maintenance-summary:
    name: Maintenance Overview
    runs-on: ubuntu-latest
    outputs:
      should_run_deps: ${{ steps.check.outputs.should_run_deps }}
      should_run_cleanup: ${{ steps.check.outputs.should_run_cleanup }}
      should_run_security: ${{ steps.check.outputs.should_run_security }}
      should_run_baseimage: ${{ steps.check.outputs.should_run_baseimage }}
    steps:
      - name: Determine tasks to run
        id: check
        run: |
          task="${{ github.event.inputs.task || 'all' }}"

          if [[ "$task" == "all" || "$task" == "dependencies" ]]; then
            echo "should_run_deps=true" >> $GITHUB_OUTPUT
          else
            echo "should_run_deps=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$task" == "all" || "$task" == "cleanup" ]]; then
            echo "should_run_cleanup=true" >> $GITHUB_OUTPUT
          else
            echo "should_run_cleanup=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$task" == "all" || "$task" == "security-audit" ]]; then
            echo "should_run_security=true" >> $GITHUB_OUTPUT
          else
            echo "should_run_security=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$task" == "all" || "$task" == "baseimage-check" ]]; then
            echo "should_run_baseimage=true" >> $GITHUB_OUTPUT
          else
            echo "should_run_baseimage=false" >> $GITHUB_OUTPUT
          fi

  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    needs: maintenance-summary
    if: needs.maintenance-summary.outputs.should_run_deps == 'true'
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Check for GitHub Actions updates
        id: actions-check
        run: |
          echo "Checking for GitHub Actions updates..."

          # Find all workflow files
          workflows=$(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null || echo "")

          if [[ -n "$workflows" ]]; then
            echo "Found workflow files:"
            echo "$workflows"

            # Check for common action version patterns that might need updates
            outdated_actions=""

            while IFS= read -r file; do
              if [[ -f "$file" ]]; then
                # Check for specific patterns that commonly need updates
                if grep -q "actions/checkout@v4" "$file"; then
                  outdated_actions+="$file: actions/checkout@v4 (consider upgrading to v5)\n"
                fi
                if grep -q "actions/setup-node@v3" "$file"; then
                  outdated_actions+="$file: actions/setup-node@v3 (consider upgrading to v4)\n"
                fi
                if grep -q "docker/setup-buildx-action@v2" "$file"; then
                  outdated_actions+="$file: docker/setup-buildx-action@v2 (consider upgrading to v3)\n"
                fi
              fi
            done <<< "$workflows"

            if [[ -n "$outdated_actions" ]]; then
              echo "outdated_found=true" >> $GITHUB_OUTPUT
              echo -e "Found potentially outdated actions:\n$outdated_actions"
            else
              echo "outdated_found=false" >> $GITHUB_OUTPUT
              echo "No obviously outdated actions found"
            fi
          else
            echo "No workflow files found"
            echo "outdated_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Docker base image updates
        id: docker-check
        run: |
          if [[ -f "Dockerfile" ]]; then
            echo "Checking base image updates..."

            # Extract current base image
            base_image=$(grep -E "^FROM " Dockerfile | head -1 | awk '{print $2}')
            echo "Current base image: $base_image"

            if [[ "$base_image" == *"linuxserver/baseimage-alpine"* ]]; then
              echo "LinuxServer.io base image detected"
              # This could be enhanced with actual API checks
              echo "baseimage_check=linuxserver" >> $GITHUB_OUTPUT
            elif [[ "$base_image" == *"alpine"* ]]; then
              echo "Alpine base image detected"
              echo "baseimage_check=alpine" >> $GITHUB_OUTPUT
            else
              echo "Other base image: $base_image"
              echo "baseimage_check=other" >> $GITHUB_OUTPUT
            fi
          else
            echo "No Dockerfile found"
            echo "baseimage_check=none" >> $GITHUB_OUTPUT
          fi

      - name: Create maintenance issue if needed
        if: steps.actions-check.outputs.outdated_found == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = 'Maintenance: Dependency Updates Available';
            const body = `## üîß Maintenance: Dependency Updates

            This issue was automatically created by the maintenance workflow.

            ### GitHub Actions Updates Needed

            The following GitHub Actions may have newer versions available:

            - Check \`.github/workflows/\` files for outdated action versions
            - Consider updating to the latest stable versions
            - Test workflows after updating

            ### Base Image Updates

            - Current base image status: ${{ steps.docker-check.outputs.baseimage_check }}
            - Check for LinuxServer.io base image updates if applicable
            - Review security updates and patches

            ### Recommended Actions

            1. Review and update GitHub Actions versions
            2. Check base image updates
            3. Test all workflows after updates
            4. Update documentation if needed

            ---
            *This issue was created automatically on ${new Date().toISOString().split('T')[0]}*
            `;

            // Check if similar issue already exists
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'maintenance,dependencies'
            });

            const existingIssue = issues.find(issue =>
              issue.title.includes('Maintenance: Dependency Updates')
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['maintenance', 'dependencies', 'automated']
              });
              console.log('‚úÖ Created maintenance issue');
            } else {
              console.log('‚ÑπÔ∏è Maintenance issue already exists');
            }

  cleanup-old-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    needs: maintenance-summary
    if: needs.maintenance-summary.outputs.should_run_cleanup == 'true'
    permissions:
      actions: write
    steps:
      - name: Delete old workflow runs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            for (const workflow of workflows.workflows) {
              console.log(`Checking workflow: ${workflow.name}`);

              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                per_page: 100
              });

              // Keep the 20 most recent runs, delete the rest
              const runsToDelete = runs.workflow_runs.slice(20);

              for (const run of runsToDelete) {
                if (run.status === 'completed') {
                  try {
                    await github.rest.actions.deleteWorkflowRun({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      run_id: run.id
                    });
                    console.log(`Deleted run ${run.id} from ${workflow.name}`);
                  } catch (error) {
                    console.log(`Could not delete run ${run.id}: ${error.message}`);
                  }
                }
              }
            }

      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            // Delete artifacts older than 30 days
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

            for (const artifact of artifacts.artifacts) {
              const artifactDate = new Date(artifact.created_at);
              if (artifactDate < thirtyDaysAgo) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id
                  });
                  console.log(`Deleted artifact: ${artifact.name} (${artifact.created_at})`);
                } catch (error) {
                  console.log(`Could not delete artifact ${artifact.name}: ${error.message}`);
                }
              }
            }

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: maintenance-summary
    if: needs.maintenance-summary.outputs.should_run_security == 'true'
    permissions:
      contents: read
      security-events: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Run comprehensive security scan
        run: |
          echo "Running security audit..."

          # Check for common security issues in configuration files
          security_issues=""

          # Check for exposed secrets patterns
          if grep -r "password\|secret\|key" --include="*.yml" --include="*.yaml" --include="*.env.example" . | grep -v "FILE__" | grep -v "#" | head -5; then
            security_issues+="Potential exposed credentials found in configuration files\n"
          fi

          # Check for insecure Docker configurations
          if [[ -f "docker-compose.yml" ]] && grep -q "privileged.*true" docker-compose.yml; then
            security_issues+="Privileged Docker containers detected\n"
          fi

          # Check for missing security headers in nginx configs
          if find . -name "*.conf" -exec grep -L "X-Frame-Options\|X-Content-Type-Options\|X-XSS-Protection" {} \; | head -1; then
            security_issues+="Missing security headers in configuration\n"
          fi

          if [[ -n "$security_issues" ]]; then
            echo "security_issues_found=true" >> $GITHUB_ENV
            echo -e "Security issues found:\n$security_issues"
          else
            echo "security_issues_found=false" >> $GITHUB_ENV
            echo "No obvious security issues found"
          fi

      - name: Create security audit issue if needed
        if: env.security_issues_found == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = 'Security Audit: Issues Detected';
            const body = `## üîí Security Audit Report

            This issue was automatically created by the maintenance workflow security audit.

            ### Issues Detected

            The automated security audit has identified potential security concerns that require review:

            - Review configuration files for exposed credentials
            - Check Docker security settings
            - Validate security headers in web server configurations
            - Review file permissions and access controls

            ### Recommended Actions

            1. Run manual security review of identified areas
            2. Update security configurations as needed
            3. Run full security scan with updated tools
            4. Close this issue once all items are addressed

            ### Security Resources

            - [Docker Security Best Practices](https://docs.docker.com/engine/security/)
            - [OWASP Security Guidelines](https://owasp.org/)
            - [LinuxServer.io Security Documentation](https://docs.linuxserver.io/)

            ---
            *This issue was created automatically on ${new Date().toISOString().split('T')[0]}*
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'audit', 'automated', 'high-priority']
            });

  baseimage-check:
    name: Check Base Image Updates
    runs-on: ubuntu-latest
    needs: maintenance-summary
    if: needs.maintenance-summary.outputs.should_run_baseimage == 'true'
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Check LinuxServer.io base image updates
        id: baseimage
        run: |
          if command -v make >/dev/null 2>&1 && make -n baseimage-check >/dev/null 2>&1; then
            echo "Running baseimage check using Make..."
            make baseimage-check || echo "Baseimage check failed or no updates available"
          else
            echo "Make baseimage-check not available, running manual check..."

            if [[ -f "Dockerfile" ]]; then
              current_image=$(grep "FROM.*linuxserver/baseimage" Dockerfile | head -1 || echo "")
              if [[ -n "$current_image" ]]; then
                echo "Current LinuxServer.io base image: $current_image"
                echo "Manual verification needed for updates"
              else
                echo "No LinuxServer.io base image detected"
              fi
            fi
          fi

  maintenance-report:
    name: Maintenance Report
    runs-on: ubuntu-latest
    needs: [maintenance-summary, dependency-updates, cleanup-old-artifacts, security-audit, baseimage-check]
    if: always()
    steps:
      - name: Generate maintenance summary
        run: |
          echo "## üîß Maintenance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Task | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Updates | ${{ needs.dependency-updates.result || 'skipped' }} | GitHub Actions, Docker images |" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact Cleanup | ${{ needs.cleanup-old-artifacts.result || 'skipped' }} | Old workflow runs, artifacts |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result || 'skipped' }} | Configuration security scan |" >> $GITHUB_STEP_SUMMARY
          echo "| Base Image Check | ${{ needs.baseimage-check.result || 'skipped' }} | LinuxServer.io image updates |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          failed_jobs=0
          if [[ "${{ needs.dependency-updates.result }}" == "failure" ]]; then failed_jobs=$((failed_jobs + 1)); fi
          if [[ "${{ needs.cleanup-old-artifacts.result }}" == "failure" ]]; then failed_jobs=$((failed_jobs + 1)); fi
          if [[ "${{ needs.security-audit.result }}" == "failure" ]]; then failed_jobs=$((failed_jobs + 1)); fi
          if [[ "${{ needs.baseimage-check.result }}" == "failure" ]]; then failed_jobs=$((failed_jobs + 1)); fi

          if [[ $failed_jobs -eq 0 ]]; then
            echo "‚úÖ **Overall Status:** All maintenance tasks completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Overall Status:** $failed_jobs maintenance task(s) need attention" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÖ **Next Maintenance:** Scheduled for next Sunday at 6 AM UTC" >> $GITHUB_STEP_SUMMARY