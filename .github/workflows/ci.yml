name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_NAME: template
  IMAGE_NAME: mildman1848/template

jobs:
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Hadolint
        run: |
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/

      - name: Lint Dockerfile
        run: hadolint Dockerfile

      - name: Validate docker-compose files
        run: |
          docker-compose config
          docker-compose -f docker-compose.yml -f docker-compose.production.yml config

      - name: Validate Makefile
        run: make --dry-run help

      - name: Check shell scripts
        run: |
          if command -v shellcheck >/dev/null 2>&1; then
            find . -name "*.sh" -type f -exec shellcheck {} \;
          else
            echo "shellcheck not available, skipping shell script validation"
          fi

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        platform: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create VERSION file if missing
        run: |
          if [ ! -f VERSION ]; then
            echo "1.0.0-ci.${GITHUB_RUN_NUMBER}" > VERSION
          fi

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.platform }}
          push: false
          tags: ${{ env.IMAGE_NAME }}:${{ matrix.platform }}-test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=$(cat VERSION)
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

      - name: Test container functionality
        if: matrix.platform == 'amd64'
        run: |
          # Load and run the built image for testing
          docker buildx build --load --platform linux/amd64 -t ${{ env.IMAGE_NAME }}:test .

          # Create test environment
          mkdir -p test-config test-data test-logs

          # Run container for testing
          docker run -d \
            --name test-container \
            -e PUID=911 \
            -e PGID=911 \
            -e TZ=UTC \
            -v $(pwd)/test-config:/config \
            -v $(pwd)/test-data:/data \
            -p 8080:8080 \
            ${{ env.IMAGE_NAME }}:test

          # Wait for container to start
          sleep 30

          # Check if container is running
          if ! docker ps | grep -q test-container; then
            echo "Container failed to start"
            docker logs test-container
            exit 1
          fi

          # Test container health (customize for your application)
          if docker exec test-container pgrep -f "your_app_binary" > /dev/null; then
            echo "✅ Application process found"
          else
            echo "⚠️ Application process not found - customize health check for your application"
          fi

          # Cleanup
          docker stop test-container
          docker rm test-container
          rm -rf test-config test-data test-logs

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:scan
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:scan
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate security report
        if: always()
        run: |
          mkdir -p security-reports
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd)/security-reports:/reports \
            aquasec/trivy:latest image --format json --output /reports/trivy-report.json ${{ env.IMAGE_NAME }}:scan

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: security-reports/

  validate-compose:
    name: Validate Docker Compose
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create test .env file
        run: |
          cat > .env << EOF
          PUID=911
          PGID=911
          TZ=UTC
          EXTERNAL_PORT=8080
          PORT=8080
          PROJECT_NAME=template
          COMPOSE_PROJECT_NAME=template
          EOF

      - name: Validate base compose
        run: docker-compose config

      - name: Validate production compose
        run: docker-compose -f docker-compose.yml -f docker-compose.production.yml config

      - name: Validate override compose
        run: docker-compose -f docker-compose.yml -f docker-compose.override.yml config

      - name: Test compose startup (dry run)
        run: |
          # Build image first
          docker-compose build

          # Test startup without actually running
          docker-compose up --no-start

          # Cleanup
          docker-compose down --remove-orphans