name: CI Pipeline - tandoor

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly
    - cron: '0 6 * * 1'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint:
    name: Lint & Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.2.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

      - name: Validate docker-compose.yml
        run: |
          # Use docker compose (plugin version) - available by default in Ubuntu runners
          docker compose --version
          docker compose config -q

      - name: Check Makefile syntax
        run: |
          make help || echo "Make not available in runner"

      - name: Validate environment files
        run: |
          # Check .env.example syntax
          if [ -f .env.example ]; then
            echo "Validating .env.example..."
            # Simple syntax validation
            grep -E '^[A-Z_][A-Z0-9_]*=' .env.example || true
          fi

  test-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=test-${{ github.sha }}
            VCS_REF=${{ github.sha }}
            TANDOOR_VERSION=1.5.20
            PROJECT_VERSION=$(cat VERSION || echo "1.5.20-automation.1")

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: mildman1848/tandoor:test
          cache-from: type=gha
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=test
            VCS_REF=${{ github.sha }}
            PROJECT_VERSION=$(cat VERSION || echo "1.5.20-automation.1")

      - name: Create test environment
        run: |
          # Create test directories
          mkdir -p test-volumes/{config,data,logs}

          # Create minimal .env for testing
          cat > .env << EOF
          DOCKER_REPO=mildman1848/tandoor
          VERSION=test
          PUID=1000
          PGID=1000
          TZ=UTC
          LOG_LEVEL=info
          EOF

      - name: Generate test secrets
        run: |
          mkdir -p secrets
          openssl rand -base64 64 > secrets/jwt_secret.txt
          openssl rand -hex 32 > secrets/api_key.txt
          echo "testuser" > secrets/db_user.txt
          openssl rand -base64 32 | tr -d "=+/" | cut -c1-25 > secrets/db_password.txt
          chmod 600 secrets/*.txt

      - name: Test container startup
        run: |
          # Start container
          docker run -d \
            --name tandoor-test \
            -p 18080:8080 \
            -v $(pwd)/test-volumes/config:/config \
            -v $(pwd)/test-volumes/data:/data \
            -v $(pwd)/test-volumes/logs:/logs \
            -e PUID=1000 \
            -e PGID=1000 \
            -e TZ=UTC \
            mildman1848/tandoor:test

      - name: Wait for container
        run: |
          # Wait for container to be ready
          timeout 120s bash -c 'while [[ "$(docker inspect -f {{.State.Health.Status}} tandoor-test 2>/dev/null)" != "healthy" ]]; do sleep 2; done' || \
          timeout 120s bash -c 'while ! docker exec tandoor-test curl -f http://localhost:80/ >/dev/null 2>&1; do sleep 2; done'

      - name: Test container health
        run: |
          # Check if container is running
          docker ps | grep tandoor-test

          # Test HTTP endpoint
          curl -f http://localhost:18080/ || \
          docker exec tandoor-test curl -f http://localhost:8080/

      - name: Test container logs
        if: always()
        run: |
          echo "=== Container logs ==="
          docker logs tandoor-test
          echo "=== Container inspect ==="
          docker inspect tandoor-test

      - name: Cleanup test container
        if: always()
        run: |
          docker stop tandoor-test || true
          docker rm tandoor-test || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: mildman1848/tandoor:scan
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mildman1848/tandoor:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for detailed output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mildman1848/tandoor:scan'
          format: 'table'
          exit-code: '0'  # Don't fail the build on vulnerabilities

  docker-compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Check docker compose
        run: |
          # Use docker compose (plugin version) - available by default in Ubuntu runners
          docker compose --version

      - name: Create test environment
        run: |
          # Copy .env.example to .env for testing
          cp .env.example .env

          # Override with test values
          cat >> .env << EOF
          VERSION=test
          IMAGE_TAG=test
          EXTERNAL_PORT=18080
          LOG_LEVEL=debug
          EOF

      - name: Generate secrets
        run: |
          mkdir -p secrets
          openssl rand -base64 64 > secrets/jwt_secret.txt
          openssl rand -hex 32 > secrets/api_key.txt
          echo "testuser" > secrets/db_user.txt
          openssl rand -base64 32 | tr -d "=+/" | cut -c1-25 > secrets/db_password.txt

      - name: Build image first
        run: |
          docker build -t mildman1848/tandoor:test .

      - name: Test docker compose up
        run: |
          docker compose up -d tandoor

      - name: Wait and test service
        run: |
          # Wait for service
          sleep 30

          # Test if service is responding
          curl -f http://localhost:18080/ || \
          docker compose exec -T tandoor curl -f http://localhost:8080/

      - name: Check logs
        if: always()
        run: |
          echo "=== Docker Compose logs ==="
          docker compose logs

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v