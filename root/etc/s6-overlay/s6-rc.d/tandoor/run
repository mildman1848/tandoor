#!/usr/bin/with-contenv bash

echo "Starting tandoor service..."
echo "Setting directory permissions..."

# Load secrets from environment file created by init-secrets
if [[ -f /tmp/secrets.env ]]; then
    echo "Loading secrets from environment file..."
    source /tmp/secrets.env
    echo "✓ Secrets loaded successfully"
else
    echo "⚠ Warning: Secrets environment file not found"
fi

# Ensure proper ownership
chown -R abc:abc /app/mediafiles /app/staticfiles 2>/dev/null || true

cd /app

# Wait for database if using PostgreSQL
if [[ "${DB_ENGINE:-django.db.backends.postgresql}" == *"postgresql"* ]]; then
    echo "Waiting for PostgreSQL database to be ready..."
    attempt=0
    max_attempts=20
    while ! pg_isready --host=${POSTGRES_HOST:-db_recipes} --port=${POSTGRES_PORT:-5432} --user=${POSTGRES_USER:-djangouser} -q; do
        attempt=$((attempt+1))
        if [ $attempt -gt $max_attempts ]; then
            echo "❌ Database not reachable. Maximum attempts exceeded."
            echo "Please check logs above - misconfiguration is very likely."
            echo "Make sure the DB container is up and POSTGRES_HOST is set properly."
            exit 1
        fi
        echo "Waiting for database... (attempt $attempt/$max_attempts)"
        sleep 5
    done
    echo "✓ PostgreSQL database is ready"
else
    echo "✓ Using ${DB_ENGINE:-django.db.backends.postgresql} - no database wait required"
fi

echo "Migrating database..."
# Run database migrations as abc user (CRITICAL - this was missing!)
s6-setuidgid abc /app/venv/bin/python manage.py migrate

echo "Collecting static files..."
# Run as abc user
s6-setuidgid abc /app/venv/bin/python manage.py collectstatic --noinput --clear 2>/dev/null || true

echo "Setting up Vite assets..."
# Vite assets are copied during Docker build from official Tandoor image
# Just ensure proper permissions
chown -R abc:abc /app/cookbook/static/vue3 2>/dev/null || true
find /app/cookbook/static/vue3 -type d -exec chmod 755 {} \; 2>/dev/null || true
find /app/cookbook/static/vue3 -type f -exec chmod 644 {} \; 2>/dev/null || true
echo "✓ Vite assets configured"

# Create service-worker.js file
cat > /app/cookbook/static/vue3/service-worker.js << 'EOF'
// Service Worker for Tandoor Recipes PWA
// This is a minimal service worker for django-vite compatibility

const CACHE_NAME = 'tandoor-cache-v1';
const urlsToCache = [
  '/',
  '/static/css/app.min.css',
  '/static/js/app.min.js'
];

self.addEventListener('install', function(event) {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(function(cache) {
        return cache.addAll(urlsToCache);
      })
  );
});

self.addEventListener('fetch', function(event) {
  event.respondWith(
    caches.match(event.request)
      .then(function(response) {
        // Cache hit - return response
        if (response) {
          return response;
        }
        return fetch(event.request);
      }
    )
  );
});
EOF

chown -R abc:abc /app/cookbook/static/vue3
chmod 644 /app/cookbook/static/vue3/manifest.json
chmod 644 /app/cookbook/static/vue3/assets/main.js
chmod 644 /app/cookbook/static/vue3/service-worker.js
echo "✓ Vite manifest and service worker created for django-vite compatibility"

echo "Starting Tandoor Recipes..."
echo "Config: Django ${DJANGO_SETTINGS_MODULE:-recipes.settings}"
echo "Debug mode: ${DEBUG:-False}"
echo "Database: ${DB_ENGINE:-postgresql} at ${POSTGRES_HOST:-db_recipes}:${POSTGRES_PORT:-5432}"
echo "Static files: ${STATIC_ROOT:-/app/staticfiles}"
echo "Media files: ${MEDIA_ROOT:-/app/mediafiles}"

# Start gunicorn as abc user with proper environment
exec s6-setuidgid abc env \
    SECRET_KEY="$SECRET_KEY" \
    POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
    POSTGRES_USER="$POSTGRES_USER" \
    /app/venv/bin/gunicorn \
    --bind 0.0.0.0:8080 \
    --workers ${GUNICORN_WORKERS:-2} \
    --timeout ${GUNICORN_TIMEOUT:-120} \
    --access-logfile - \
    --error-logfile - \
    --log-level info \
    recipes.wsgi:application